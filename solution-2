address contract - 0xfe0044525d46045b20b5152f2fd93faff0a61d66
TX - 0x29b19eb7c7de5bb326ff6a2b1f427a165409a73ac7c82f333e4ae24c84642b3c

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts@4.8.2/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts@4.8.2/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts@4.8.2/security/Pausable.sol";
import "@openzeppelin/contracts@4.8.2/access/Ownable.sol";
import "@openzeppelin/contracts@4.8.2/token/ERC20/extensions/draft-ERC20Permit.sol";

contract MemeCoin is ERC20, ERC20Burnable, Pausable, Ownable, ERC20Permit {
    constructor() ERC20("MemeCoin", "MMC") ERC20Permit("MemeCoin") {
        _mint(msg.sender, 200000000 * 10 ** decimals());
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount)
        internal
        whenNotPaused
        override
    {
        super._beforeTokenTransfer(from, to, amount);
    }
}
